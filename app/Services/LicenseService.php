<?php
namespace App\Services;
use Carbon\Carbon;
use App\Helpers\LicenseHelper;
use Illuminate\Support\Facades\File;
use Illuminate\Http\UploadedFile;
use App\Models\License;
class LicenseService
{
    public function uploadPublicKey(UploadedFile $file, bool $overwrite = false): array
    {
        $path = $this->getStorageKeys(); // ou crie getStorageKeys() no servi√ßo

        if (!File::exists($path)) {
            File::makeDirectory($path, 0755, true);
        } elseif (File::exists($path . '/public.pem') && !$overwrite) {
            return ['success' => false, 'message' => 'Chave p√∫blica j√° existe. Marque para substituir.'];
        }

        $file->move($path, 'public.pem');

        return ['success' => true, 'message' => 'Chave p√∫blica enviada com sucesso!'];
    }



    public function getStorageKeys(): string
    {
        return storage_path('keys');
    }

    private function extraSecret()
    {

        return LicenseHelper::getSegredoExtra();
    }
    public function getClientStoragePathKeyPublic()
    {
        return config('license.client.storage_path_key_public');
    }
    public function getClientStoragePathKeyDat()
    {
        return config('license.client.storage_path_dat');
    }

    // Resolve a licen√ßa (arquivo ou banco)
    private function getLicenseCode()
    {
        $filePath = getClientStoragePathDat();

        if (file_exists($filePath)) {
            if (filesize($filePath) > 0) {
                return getLicenseCodeFile(); // arquivo existe e n√£o est√° vazio
            } else {
                \Log::warning("Arquivo de licen√ßa existe mas est√° vazio: $filePath");
                return false; // arquivo vazio
            }
        }

        $latestLicense = getLicenseCodeBd();
        if ($latestLicense) {
            return $latestLicense->license_code;
        }

        return false; // nem arquivo v√°lido nem registro no banco
    }

    // Retorna os dados descriptografados
    public function getLicenseData(): array
    {
        $licenseCode = $this->getLicenseCode();

        if (!$licenseCode) {
            return ['status' => false, 'message' => 'Licen√ßa ausente ou n√£o encontrada, por favor active a licen√ßa ou contacte o suporte administativo.'];
        }

        try {
            $dados = json_decode(decryptLicenseCode($licenseCode), true);
            if (!$dados) {
                return ['status' => false, 'message' => 'N√£o foi poss√≠vel decodificar a licen√ßa'];
            }
            return ['status' => true, 'message' => 'Licen√ßa carregada com sucesso', 'data' => $dados];
        } catch (\Exception $e) {
            \Log::error("Erro ao decodificar licen√ßa: " . $e->getMessage());
            return ['status' => false, 'message' => 'Erro ao decodificar licen√ßa: ' . $e->getMessage()];
        }
    }

    // Verifica se est√° expirada
    private function isExpired(): bool
    {
        $licenseData = $this->getLicenseData();
        return now()->gt(Carbon::parse($licenseData['data']['expire_in']));
    }



    // Verifica se o hardware bate
    private function isHardwareValid(): bool
    {
        $licenseData = $this->getLicenseData();

        return $licenseData['data']['hardware_id'] === getHardwareFingerprint();
    }

    private function isPublicKeyValid(): bool
    {
        return file_exists(getClientStoragePathKeyPublic());
    }
    private function isRSASignatureValid(array $licenseData): bool
    {
        // Pega os dados reais da licen√ßa
        $data = $licenseData['data'];

        if (empty($data['rsa'])) {
            return false;
        }

        $publicKeyPath = getClientStoragePathKeyPublic();
        if (!file_exists($publicKeyPath)) {
            return false;
        }

        $publicKey = openssl_pkey_get_public(file_get_contents($publicKeyPath));
        $assinaturaRSA = base64_decode($data['rsa']);

        $dadosCriticos = json_encode([
            'client_name' => $data['client_name'],
            'hardware_id' => $data['hardware_id'],
            'expire_in' => $data['expire_in'],
        ]);

        return openssl_verify($dadosCriticos, $assinaturaRSA, $publicKey, OPENSSL_ALGO_SHA256) === 1;
    }

    private function isHmacValid(): bool
    {
        $licenseData = $this->getLicenseData();

        // Se n√£o houver licen√ßa ou dados
        if (!$licenseData) {
            return false;
        }

        $data = $licenseData['data'];

        if (empty($data['hmac'])) {
            return false;
        }

        $dadosParaHMAC = $data;
        unset($dadosParaHMAC['hmac']);

        // Calcula assinatura
        $assinaturaCorreta = hash_hmac('sha256', json_encode($dadosParaHMAC), $this->extraSecret());

        // Compara com seguran√ßa
        return hash_equals($assinaturaCorreta, $data['hmac']);
    }



    //resposta de verifica√ß√£o expirada e hardware
    public function verificationStatus(): array
    {
        if (!$this->isPublicKeyValid()) {
            return ['status' => false, 'message' => 'Chave p√∫blica √© inv√°lida ou n√£o existe, contate o suporte para adquirir uma nova chave!'];
        }
        $licenseData = $this->getLicenseData();
        if (!$licenseData['status']) {
            return ['status' => false, 'message' => $licenseData['message']];
        }

        if ($this->isExpired()) {
            return ['status' => false, 'message' => 'Licen√ßa expirada'];
        }
        if (!$this->isHardwareValid()) {
            return ['status' => false, 'message' => 'Licen√ßa inv√°lida para este hardware ou m√°quina'];
        }

        if (!$this->isRSASignatureValid(getLicenseCodedecrypted())) {
            return ['status' => false, 'message' => 'Assinatura RSA inv√°lida ou ausente!'];
        }
        if (!$this->isHmacValid()) {
            return ['status' => false, 'message' => 'Assinatura HMAC inv√°lida!'];
        }

        return ['status' => true, 'message' => 'Licen√ßa v√°lida'];
    }


    public function checkLicense(): array
    {

        $licenseData = $this->getLicenseData();

        $now = Carbon::now();
        $expire = Carbon::parse($licenseData['data']['expire_in']);
        $daysLeft = ceil($now->diffInDays($expire, false));

        return [
            'valid' => $daysLeft >= 0,
            'days_left' => $daysLeft
        ];
    }

    //Ativar a licen√ßa
    public function activateLicense(string $licenseCode): array
{
    if (!File::exists($this->getStorageKeys())) {
        return ['success' => false, 'message' => 'Chave p√∫blica n√£o existe. Fa√ßa o upload primeiro, para ativar a licen√ßa.'];
    }

    try {
        $dados = json_decode(decryptLicenseCode($licenseCode), true);
    } catch (\Exception $e) {
        return ['success' => false, 'message' => 'C√≥digo de licen√ßa inv√°lido!'];
    }

    if (!$dados) {
        return ['success' => false, 'message' => 'C√≥digo de licen√ßa inv√°lido!'];
    }

    // üîê Segredo protegido e HMAC
    $segredoExtra = LicenseHelper::getSegredoExtra();
    $dadosParaAssinatura = $dados;
    unset($dadosParaAssinatura['hmac']);

    $assinaturaCorreta = hash_hmac('sha256', json_encode($dadosParaAssinatura), $segredoExtra);
    if (!hash_equals($assinaturaCorreta, $dados['hmac'])) {
        return ['success' => false, 'message' => 'Licen√ßa adulterada (HMAC inv√°lido)!'];
    }

    // ‚úÖ Verifica√ß√£o RSA
    if (!empty($dados['rsa'])) {
        $publicKeyPath = $this->getClientStoragePathKeyPublic();
        $publicKey = openssl_pkey_get_public(file_get_contents($publicKeyPath));
        $assinaturaRSA = base64_decode($dados['rsa']);

        if (openssl_verify(json_encode([
            'client_name' => $dados['client_name'],
            'hardware_id' => $dados['hardware_id'],
            'expire_in' => $dados['expire_in'],
        ]), $assinaturaRSA, $publicKey, OPENSSL_ALGO_SHA256) !== 1) {
            return ['success' => false, 'message' => 'Licen√ßa adulterada (Chave p√∫blica inv√°lida)!'];
        }
    } else {
        return ['success' => false, 'message' => 'Licen√ßa inv√°lida (sem assinatura RSA)!'];
    }

    // ‚è≥ Valida expira√ß√£o
    if (now()->gt(Carbon::parse($dados['expire_in']))) {
        return ['success' => false, 'message' => 'Licen√ßa expirada!'];
    }

    // üíª Valida hardware
    if ($dados['hardware_id'] !== getHardwareFingerprint()) {
        return ['success' => false, 'message' => 'Licen√ßa n√£o corresponde a esta m√°quina!'];
    }

    // ‚úÖ Salva no banco e arquivo
    License::updateOrCreate(
        ['id' => 1],
        [
            'license_code' => $licenseCode,
            'valid_until' => $dados['expire_in'],
        ]
    );

    file_put_contents(getClientStoragePathDat(), $licenseCode);

    return ['success' => true, 'message' => 'Licen√ßa ativada com sucesso! V√°lida at√© ' . $dados['expire_in']];
}


}
